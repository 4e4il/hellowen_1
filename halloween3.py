from tkinter import *  # Імпортуємо всі компоненти бібліотеки tkinter для створення графічного інтерфейсу
from random import randint, choice  # Імпортуємо функцію randint і choice для генерації випадкових чисел і вибору

# Клас, що описує об'єкти (павуки, кажани, змії тощо)
class Creature:
    def __init__(self, x, y=0):  # Ініціалізуємо об'єкт з початковими координатами x і y (y за замовчуванням = 0)
        # Список можливих зображень
        images = ["spider.png", "bat.png", "eae.png", "snale.png"]
        self.img_file = choice(images)  # Вибираємо випадкове зображення з цього списку
        self.img = PhotoImage(file=self.img_file).subsample(randint(5, 20), randint(5, 20))  # Завантажуємо вибране зображення і зменшуємо його до випадкового розміру
        self.speed = randint(1, 5)  # Встановлюємо випадкову швидкість об'єкта (від 1 до 5 пікселів за крок)
        self.x = x  # Задаємо початкову позицію по осі x
        self.y = y  # Задаємо початкову позицію по осі y
        self.image = canv.create_image(self.x, self.y, image=self.img)  # Створюємо зображення об'єкта на полотні з координатами x і y
        canv.tag_bind(self.image, '<Button-1>', self.remove)  # Додаємо можливість видалення об'єкта при натисканні на нього мишею

    def move(self):  # Метод для переміщення об'єкта вниз по екрану
        self.y += self.speed  # Збільшуємо координату y на величину швидкості об'єкта
        canv.move(self.image, 0, self.speed)  # Переміщуємо зображення об'єкта на полотні вниз
        if self.y > 500:  # Якщо об'єкт вийшов за межі екрана (по осі y)
            self.y = 0  # Переміщуємо його назад на верхню межу екрана
            canv.coords(self.image, self.x, self.y)  # Оновлюємо координати зображення об'єкта

    def remove(self, event):  # Метод для видалення об'єкта при натисканні на нього
        canv.delete(self.image)  # Видаляємо зображення об'єкта з полотна
        list_creatures.remove(self)  # Видаляємо об'єкт зі списку об'єктів

list_creatures = []  # Створюємо порожній список для зберігання всіх об'єктів

# Функція для створення нового об'єкта
def new_creature():
    creature = Creature(randint(0, 500), 0)  # Створюємо нового об'єкта з випадковою координатою x і початковою координатою y=0
    list_creatures.append(creature)  # Додаємо нового об'єкта до списку
    root.after(5000, new_creature)  # Викликаємо цю функцію кожні 5 секунд для створення нового об'єкта

# Функція для переміщення всіх об'єктів
def draw():
    for el in list_creatures:  # Проходимо по кожному об'єкту в списку
        el.move()  # Переміщуємо об'єкт
    canv.after(100, draw)  # Оновлюємо положення всіх об'єктів кожні 100 мс

# Функція для переміщення прицілу відповідно до координат миші
def move_pricel(event):
    canv.coords(pricel, event.x, event.y)  # Оновлюємо положення прицілу на полотні згідно з новими координатами миші

root = Tk()  # Створюємо головне вікно програми
canv = Canvas(root, width=500, height=500, bg="white")  # Створюємо полотно (Canvas) з розмірами 500x500 пікселів та білим фоном
canv.pack()  # Додаємо полотно до головного вікна

# Завантажуємо зображення фону розміром 500x500 пікселів
bg_img = PhotoImage(file="background.png")  # Завантажуємо зображення фону з файлу "background.png". Файл має бути розміром 500x500 пікселів
# Додаємо зображення фону на холст
canv.create_image(0, 0, anchor=NW, image=bg_img)  # Встановлюємо зображення фону на полотні в позиції (0, 0) з прив'язкою до лівого верхнього кута (NW)

pricel_img = PhotoImage(file="pricel.png")  # Завантажуємо зображення для прицілу з файлу "pricel.png"
pricel = canv.create_image(250, 250, image=pricel_img)  # Створюємо зображення прицілу на полотні у початковій позиції (250, 250)
canv.bind("<Motion>", move_pricel)  # Прив'язуємо подію руху миші до функції, що переміщує приціл

draw()  # Запускаємо функцію, що відповідає за рух об'єктів
new_creature()  # Запускаємо створення нових об'єктів кожні 5 секунд

root.mainloop()  # Запускаємо основний цикл програми для обробки подій і відображення вікна
